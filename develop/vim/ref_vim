

参考: 一步步将vim改造成C/C++开发环境(IDE)  


1、安装Vim和Vim基本插件

~$ sudo apt-get install vim vim-scripts vim-doc

其中vim-scripts是vim的一些基本插件，包括语法高亮的支持、缩进等等。

2、Vim配置文件

Vim强大的功能，其来源基本上就两个地方：Vim插件以及Vim配置文件。

系统配置 /usr/share/vim/和/etc/vim/  ---- 不修改
用户配置 /home/user/.vimrc

----------
报错:
line    3:
E492: Not an editor command:      debian.vim

-> 注释掉:  -> 有什么问题？
" debian.vim  


3、ctags安装与配置
ctags可以建立源码树的标签索引（标签就是一个标识符被定义的地方，如函数定义），使程序员在编程时能迅速定位函数、变量、宏定义等位置去查看原形。

$ sudo apt-get install ctags

/usr/include/x86_64-linux-gnu$ sudo ctags -R *
/usr/include/c++$ sudo ctags -R *

.vimrc文件的最后添加如下内容：
    "--ctags setting--
    " 按下F5重新生成tag文件，并更新taglist
    map <F5> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
    imap <F5> <ESC>:!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
    set tags=tags
    set tags+=./tags "add current directory's generated tags file
    set tags+=/usr/include/x86_64-linux-gnu/tags "add new tags file
    set tags+=/usr/include/c++/tags


4、管理vim插件——vim-addons
通过vim-addons，我们可以管理vim插件。我们在sudo apt-get install vim vim-scripts vim-doc时，一般会自动安装上vim-addons。
sudo apt-get install vim-addon-manager手动安装。

$ vim-addons status

# Name                     User Status  System Status 
align                       removed       removed       
alternate                   removed       removed       
bufexplorer                 removed       removed       
calendar                    removed       removed

$ cd
$ mkdir .vim   " /home/user/.vim
$ cd .vim
$ mkdir plugin
$ mkdir doc  

vim-addons install xxxx


5、vim自动补全——OmniCppComplete

$ vim-addons install omnicppcomplete 
$ ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .

/usr/include/c++$ sudo ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .
/usr/include/x86_64-linux-gnu$ sudo ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .

按下Ctrl+X Ctrl+O


6、提示函数原型echofunc
echofunc可以在命令行中提示当前输入函数的原型。

$ ctags -R --fields=+lS


7、标签浏览器Taglist

$ vim-addons install taglist

命令":Tlist"打开/关闭taglist窗口

:help taglist.txt


8、文件浏览器和缓冲区管理器WinManager

Taglist插件本身就提供了对WinManager的支持，这里，用WinManager来管理文件浏览器netrw和标签浏览器Taglist。

netrw是标准的vim插件, 已经随vim一起安装进系统里
~$ vim-addons install winmanager 


9、buffer管理器MiniBufferExplorer
MiniBufferExplorer用于浏览和管理buffer，如果只打开一个文件，是不会显示在屏幕上的，而打开多个文件之后，会自动出现在屏幕上。

"缓冲区" 是一块内存区域，里面存储着正在编辑的文件。
"窗口" 被用来查看缓冲区里的内容。
"屏幕" Vim 所用的整个工作区域，可以是一个终端模拟窗口，也被叫做 "Vim 窗口"。

$ vim-addons install minibufexplorer 


10、代码折叠fold

折叠用于把缓冲区内某一范围内的文本行显示为屏幕上的一行。

11*、项目目录数管理器Project
Project插件是用来显示项目的目录树的，这个目录树是默认保存在~/.vimprojects文件中。

$ vim-addons install project 


12、quickfix命令集
通过quickfix命令集，你可在 Vim 内编译程序并直接跳转到出错位置进行修正。你可以接着重新编译并做修正，直到不再出错为止。


13*、Cscope
Cscope是一个类似于ctags的工具，不过其功能比ctags强大很多。

~$ sudo apt-get install cscope

用法：
<1>、为源码建立一个cscope数据库
~ $ cscope -Rbq
~ $ ls cscope.*
cscope.in.out  cscope.out  cscope.po.out
<2>、用vim打开某个源码文件，末行模式下，输入“:cs add cscope.out"（该命令已被我们映射为快捷键F4），添加cscope数据库到vim。因为我们已将vim配置为启动时，自动添加当前目录下的cscope数据库，所以你再添加该cscope数据库时，vim会提示“重复cscope数据库 未被加入“
<3>、完成前两步后，现在就可以用“cs find c”等Cscope查找命令查找关键字了。我们已在.vimrc中将“cs find c”等Cscope查找命令映射为<C-_>c等快捷键（按法是先按Ctrl+Shift+-, 然后很快按下c）
















